cmake_minimum_required(VERSION 2.8.9)

project(photoflow CXX C)

# options controlling the build process
IF(MINGW)
  option(BUNDLED_LENSFUN "Use bundled LensFun library" ON)
  option(USE_NLS "Build Native Language Support (using gettext)" ON)
ELSEIF(APPLE)
  option(BUNDLED_LENSFUN "Use bundled LensFun library" ON)
  option(USE_NLS "Build Native Language Support (using gettext)" ON)
ELSE(MINGW)
  option(BUNDLED_GEXIV2 "Use bundled Gexiv2 library" OFF)
  option(BUNDLED_LENSFUN "Use bundled LensFun library" ON)
  option(USE_NLS "Build Native Language Support (using gettext)" ON)
ENDIF(MINGW)
option(BABL_FLIPS_DISABLED "BABL flips disabled" OFF)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules/")
#set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)
set(CMAKE_POSITION_INDEPENDENT_CODE True)

set(CMAKE_C_USE_RESPONSE_FILE_FOR_OBJECTS 0)
set(CMAKE_C_USE_RESPONSE_FILE_FOR_LIBRARIES 0)
set(CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS 0)
set(CMAKE_CXX_USE_RESPONSE_FILE_FOR_LIBRARIES 0)


find_package(PkgConfig)
macro(get_lib_fullpath _prefix)
	foreach(dir ${${_prefix}_LIBRARY_DIRS})
		message(STATUS "library dir='${dir}'")
		foreach(lib ${${_prefix}_LIBRARIES})
			message(STATUS "library name='${lib}'")
			find_library(${_prefix}_LIB_TMP ${lib} PATHS ${dir} NO_DEFAULT_PATH)
			message(STATUS "library='${${_prefix}_LIB_TMP}'")
			if(${_prefix}_LIB_TMP)
				if(${_prefix}_LIBRARIES_FULLPATH)
				#	set(${_prefix}_LIBRARIES_FULLPATH "${${_prefix}_LIBRARIES_FULLPATH} ${${_prefix}_LIB_TMP}")
					LIST(APPEND ${_prefix}_LIBRARIES_FULLPATH "${${_prefix}_LIB_TMP}")
				else(${_prefix}_LIBRARIES_FULLPATH)
				#	set(${_prefix}_LIBRARIES_FULLPATH "${${_prefix}_LIB_TMP}")
					LIST(APPEND ${_prefix}_LIBRARIES_FULLPATH "${${_prefix}_LIB_TMP}")
				endif(${_prefix}_LIBRARIES_FULLPATH)
				#LIST(APPEND ${_prefix}_LIBRARIES_FULLPATH "${${_prefix}_LIB_TMP}")
				#LIST(APPEND ${_prefix}_LIBRARIES_FULLPATH "-L${dir}")
				#LIST(APPEND ${_prefix}_LIBRARIES_FULLPATH "-l${lib}")
			endif(${_prefix}_LIB_TMP)
			unset(${_prefix}_LIB_TMP CACHE)
		endforeach()
	endforeach()
endmacro()


MESSAGE(STATUS "Check for LCMS2 availability...")
#FIND_PACKAGE(LCMS2)
pkg_check_modules(LCMS2 REQUIRED lcms2) 
get_lib_fullpath(LCMS2)

find_package (TIFF REQUIRED)

find_package (PNG REQUIRED)

find_package (JPEG REQUIRED)

find_package (ZLIB REQUIRED)

#pkg_check_modules(FFTW3 REQUIRED fftw3>=3.0)
pkg_check_modules(FFTW3 REQUIRED fftw3)
get_lib_fullpath(FFTW3)

pkg_check_modules(XML2 REQUIRED libxml-2.0)
get_lib_fullpath(XML2)

pkg_check_modules(EXIF REQUIRED libexif)
get_lib_fullpath(EXIF)

#pkg_check_modules(EXIV2 REQUIRED exiv2)
find_package (Exiv2)
#if(NOT BUNDLED_GEXIV2)
#  pkg_check_modules(GEXIV2 REQUIRED gexiv2)
#  MESSAGE( STATUS "GEXIV2_INCLUDE_DIRS:         " ${GEXIV2_INCLUDE_DIRS} )
#  MESSAGE( STATUS "GEXIV2_LIBRARY_DIRS:         " ${GEXIV2_LIBRARY_DIRS} )
#endif(NOT BUNDLED_GEXIV2)

if(NOT BUNDLED_LENSFUN)
  pkg_check_modules(LENSFUN REQUIRED lensfun)
  get_lib_fullpath(LENSFUN)
  MESSAGE( STATUS "LENSFUN_INCLUDE_DIRS:         " ${LENSFUN_INCLUDE_DIRS} )
  MESSAGE( STATUS "LENSFUN_LIBRARY_DIRS:         " ${LENSFUN_LIBRARY_DIRS} )
  MESSAGE( STATUS "LENSFUN_LIBRARIES:         " ${LENSFUN_LIBRARIES})
endif(NOT BUNDLED_LENSFUN)


#IF(NOT MINGW)
pkg_check_modules(OPENEXR OpenEXR)
get_lib_fullpath(OPENEXR)
pkg_check_modules(ORC orc-0.4)
get_lib_fullpath(ORC)
#ENDIF(NOT MINGW)

#FIND_PACKAGE(LibRaw 0.13 REQUIRED)
#pkg_check_modules(LIBRAW REQUIRED libraw)

#find_package (LibXML++ REQUIRED)
#pkg_check_modules(LIBXML REQUIRED libxml++-2.6) 

pkg_check_modules(SIGC2 REQUIRED sigc++-2.0)
get_lib_fullpath(SIGC2)

pkg_check_modules(PIXMAN pixman-1 REQUIRED) 
get_lib_fullpath(PIXMAN)
pkg_check_modules(PANGO pango) 
get_lib_fullpath(PANGO)
pkg_check_modules(PANGOFT2 pangoft2) 
get_lib_fullpath(PANGOFT2)
pkg_check_modules(GLIB glib-2.0) 
get_lib_fullpath(GLIB)
pkg_check_modules(GMODULE gmodule-2.0) 
get_lib_fullpath(GMODULE)
pkg_check_modules(GTHREAD gthread-2.0) 
get_lib_fullpath(GTHREAD)
pkg_check_modules(GOBJECT gobject-2.0) 
get_lib_fullpath(GOBJECT)
pkg_check_modules(GLIBMM glibmm-2.4) 
get_lib_fullpath(GLIBMM)
#pkg_check_modules(GTKMM3 gtkmm-3.0<=3.4.0) 
MESSAGE( STATUS "GLIB_INCLUDE_DIRS:         " ${GLIB_INCLUDE_DIRS} )
MESSAGE( STATUS "GLIB_LIBRARY_DIRS:         " ${GLIB_LIBRARY_DIRS} )

pkg_check_modules(VIPS REQUIRED vips>=8.3.3)
get_lib_fullpath(VIPS)
#pkg_check_modules(VIPSCC REQUIRED vipsCC)
MESSAGE( STATUS "VIPS_INCLUDE_DIRS:         " ${VIPS_INCLUDE_DIRS} )
MESSAGE( STATUS "VIPS_LIBRARY_DIRS:         " ${VIPS_LIBRARY_DIRS} )
MESSAGE( STATUS "VIPS_LIBRARIES_FULLPATH:   " ${VIPS_LIBRARIES_FULLPATH} )

if (APPLE)
    find_package (MacIntegration REQUIRED)
endif (APPLE)


if(USE_GTKMM3)
  pkg_check_modules(GTKMM3 REQUIRED gtkmm-3.0) 
  get_lib_fullpath(GTKMM3)
else(USE_GTKMM3)
  pkg_check_modules(GTKMM2 REQUIRED gtkmm-2.4) 
  get_lib_fullpath(GTKMM2)
endif(USE_GTKMM3)

MESSAGE( STATUS "GTKMM2_FOUND:         " ${GTKMM2_FOUND} )
MESSAGE( STATUS "GTKMM3_FOUND:         " ${GTKMM3_FOUND} )
MESSAGE( STATUS "GTKMM2_LIBRARIES:         " ${GTKMM2_LIBRARIES} )
MESSAGE( STATUS "GTKMM2_LIBRARIES_FULLPATH: '"${GTKMM2_LIBRARIES_FULLPATH}"'" )

  
IF(NOT MINGW)
#need to put here do setting LOCALE_DIR variable
if(USE_NLS)
find_package(Gettext)
if(Gettext_FOUND)
	if(NOT LOCALE_DIR)
    SET(LOCALE_DIR "${CMAKE_INSTALL_PREFIX}/share/locale")
	endif(NOT LOCALE_DIR)

	if(NOT LOCALE_DIR)
		message(QUIET "Set LOCALE_DIR to path to get Gettext working")
	else()
		find_package(Msgfmt)
		if(Msgfmt_FOUND)
			message(STATUS "Found msgfmt to convert language file. Translation enabled")
			add_subdirectory(po)
		else()
			message(STATUS "Cannot find msgfmt to convert language file. Translation won't be enabled")
		endif()
	endif(NOT LOCALE_DIR)
endif(Gettext_FOUND)
endif(USE_NLS)
ENDIF(NOT MINGW)
MESSAGE( STATUS "Msgfmt_FOUND:         " ${Msgfmt_FOUND} )


set(THEME hicolor)
set(THEME_DIRECTORY ${CMAKE_INSTALL_PREFIX}/share/icons/${THEME})

add_subdirectory(src) 
add_subdirectory(data)
